panel.grid(h=-1,v=-1,...)
panel.hexbinplot(x,y,xbins=15,...,border=gray(.7),
trans=function(x)x^.5)
panel.loess(x , y, ..., lwd=2,col='red')
}
windows(width=9,height=9)
splom(Boston2,
xlab='',main="Boston Housing: Selected Variables",
pscale=0, varname.cex=0.8,axis.text.cex=0.6,
axis.text.col="purple",axis.text.font=2,
axis.line.tck=.5,
panel=offDiag,
diag.panel = onDiag
)
varNum(Boston)
Boston2 <- Boston[,-c(2,4,9,12)]
# Hexbin is agaian modified to 15 xbins and trans power is set to 0.5.
offDiag <- function(x,y,...){
panel.grid(h=-1,v=-1,...)
panel.hexbinplot(x,y,xbins=15,...,border=gray(.7),
trans=function(x)x^.5)
panel.loess(x , y, ..., lwd=2,col='red')
}
windows(width=9,height=9)
splom(Boston2,
xlab='',main="Boston Housing: Selected Variables",
pscale=0, varname.cex=0.8,axis.text.cex=0.6,
axis.text.col="purple",axis.text.font=2,
axis.line.tck=.5,
panel=offDiag,
diag.panel = onDiag
)
varNum(Boston)
Boston2 <- Boston[,-c(2,4,9,12)]
# Hexbin is agaian modified to 15 xbins and trans power is set to 0.5.
offDiag <- function(x,y,...){
panel.grid(h=-1,v=-1,...)
panel.hexbinplot(x,y,xbins=15,...,border=gray(.7),
trans=function(x)x^.5)
panel.loess(x , y, ..., lwd=2,col='red')
}
# windows(width=9,height=9)
splom(Boston2,
xlab='',main="Boston Housing: Selected Variables",
pscale=0, varname.cex=0.8,axis.text.cex=0.6,
axis.text.col="purple",axis.text.font=2,
axis.line.tck=.5,
panel=offDiag,
diag.panel = onDiag
)
windows(width=9,height=9)
splom(Boston[,c(8,5,13,6,14)],
xlab='',main="Boston Housing: Selected Variables",
pscale=0, varname.cex=0.8,axis.text.cex=0.6,
axis.text.col="purple",axis.text.font=2,
axis.line.tck=.5,
panel=offDiag,
diag.panel = onDiag
)
# windows(width=9,height=9)
splom(Boston[,c(8,5,13,6,14)],
xlab='',main="Boston Housing: Selected Variables",
pscale=0, varname.cex=0.8,axis.text.cex=0.6,
axis.text.col="purple",axis.text.font=2,
axis.line.tck=.5,
panel=offDiag,
diag.panel = onDiag
)
set.seed(137)
Boston3 <- Boston[,c(1,5,6,8,11,13,14)]
boston3Rf <- randomForest(medv~., data=Boston3,
importance=TRUE, proximity=TRUE )
boston3Rf
87.9 MSE
set.seed(137)
Boston3 <- Boston[,c(1,5,6,8,11,13,14)]
boston3Rf <- randomForest(medv~., data=Boston3,
importance=TRUE, proximity=TRUE )
boston3Rf
set.seed(137)
Boston3 <- Boston[,c(1,5,6,8,11,13,14)]
boston3Rf <- randomForest(medv~., data=Boston3,
importance=TRUE, proximity=TRUE )
boston3Rf
varImpPlot(boston3Rf)
set.seed(137)
Boston4 <- Boston[,c(5,6,8,11,13,14)]
boston4Rf <- randomForest(medv~., data=Boston4,
importance=TRUE, proximity=TRUE )
boston4Rf
86.25
varImpPlot(boston4Rf)
set.seed(137)
Boston4 <- Boston[,c(5,6,8,11,13,14)]
boston4Rf <- randomForest(medv~., data=Boston4,
importance=TRUE, proximity=TRUE )
boston4Rf
86.25
varImpPlot(boston4Rf)
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
bostonTrain <- randomForest(medv~.,data=Boston,subset=train,importance=TRUE)
yhat = predict(bostonTrain,newdata=Boston[-train,])
mse <- mean((Boston$medv[-train]- yhat)^2)
mse
boston.test=Boston[-train,"medv"]
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
bostonTrain <- randomForest(medv~.,data=Boston,subset=train,importance=TRUE)
yhat = predict(bostonTrain,newdata=Boston[-train,])
mse <- mean((Boston$medv[-train]- yhat)^2)
mse
boston.test=Boston[-train,"medv"]
set.seed(1)
bag.boston=randomForest(medv~.,data=Boston,subset=train, mtry=13,importance=TRUE)
bag.boston
yhat.bag = predict(bag.boston,newdata=Boston[-train,])
boston.test = Boston[-train, "medv"]
plot(yhat.bag, boston.test,las=1, pch = 16)
abline(0,1)
title(main=paste("Boston Suburb Data", "Median Owner-occupied House Values $1000", sep="\n"))
mse <- mean((yhat.bag - boston.test)^2)
mse
den <- mean((boston.test-mean(boston.test))^2)
pVar1 <- 100*(1-(mse/den))
pVar1
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry=13,ntree=25)
yhat.bag = predict(bag.boston,newdata=Boston[-train,])
mean((yhat.bag-boston.test)^2)
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry=13,ntree=25)
yhat.bag = predict(bag.boston,newdata=Boston[-train,])
mean((yhat.bag-boston.test)^2)
set.seed(1)
rf.boston=randomForest(medv~.,data=Boston,
subset=train,mtry=6,importance=TRUE)
rf.boston
yhat.rf = predict(rf.boston,newdata=Boston[-train,])
testMse <- mean((yhat.rf-boston.test)^2)
testMse
den <- mean((boston.test - mean(boston.test))^2)
pVar <- 100*(1-(testMse/den))
pVar
importance(rf.boston)
windows()
varImpPlot(rf.boston)
windows()
den <- mean((boston.test - mean(boston.test))^2)
pVar <- 100*(1-(testMse/den))
pVar
importance(rf.boston)
# windows()
varImpPlot(rf.boston)
den <- mean((boston.test - mean(boston.test))^2)
pVar <- 100*(1-(testMse/den))
pVar
# importance(rf.boston)
# # windows()
# varImpPlot(rf.boston)
den <- mean((boston.test - mean(boston.test))^2)
pVar <- 100*(1-(testMse/den))
pVar
importance(rf.boston)
# windows()
varImpPlot(rf.boston)
ggplot(employeeData, aes(HourlyRate, YearsAtCompany, colour = Attrition)) +
geom_point() +
labs(x = "Distance to Work", y="Years at Company", title="Relationship b/n Distance Traveled & Years at Company") + facet_wrap(~Attrition,  ncol = 2) + hw
library("dplyr")
library(tidyverse)
source('hw.R')
source('hwLeft.R')
source('hwRight.R')
library(gridExtra)
library(ggplot2)
data <- read.csv(file = "Employee-Attrition.csv")
head(data)
data <- tibble(data)
data
colnames(Employee)
colnames(Employee)
colnames(data)
summary(data)
employeeData <- select(data, c(1,2,3,5,6,7,12,13,15,16,18,19,20,23,24,25,29,31,32,33))
employeeData
names(employeeData)[1] <- 'Age'
employeeData
StatusCount<- as.data.frame.matrix(employeeData %>%
group_by(Attrition) %>%
select(Gender) %>%
table())
StatusCount
StatusCount<- as.data.frame.matrix(employeeData %>%
group_by(Attrition) %>%
select(Gender) %>%
plot())
StatusCount<- as.data.frame.matrix(employeeData %>%
group_by(Attrition) %>%
select(Gender) %>%
table())
StatusCount
barchart(typePanelSorted,groups = FALSE,
layout = c(1,6),xlim = c(0,55),
main = "Who is Raising the Children?",
xlab = "Percent",
scales = list(x = list(tck = 0, alternating = FALSE)),
typeRaceMeans = typeRaceMeans,
panel = function(...){
panel.fill(rgb(.9,.9,.9))
panel.grid(h = 0,v = -1,col = "white",lwd = 2)
i <- panel.number()
panel.abline(v = typeRaceMeans[i],col = "red",lwd = 3)
panel.barchart(col = rgb(0,.5,1),cex = .95,...)
}
)
barchart(typePanelSorted,groups = FALSE,
layout = c(1,6),xlim = c(0,55),
main = "Who is Raising the Children?",
xlab = "Percent",
scales = list(x = list(tck = 0, alternating = FALSE)),
typeRaceMeans = typeRaceMeans,
panel = function(...){
panel.fill(rgb(.9,.9,.9))
panel.grid(h = 0,v = -1,col = "white",lwd = 2)
i <- panel.number()
panel.abline(v = typeRaceMeans[i],col = "red",lwd = 3)
panel.barchart(col = rgb(0,.5,1),cex = .95,...)
}
)
barchart(StatusCount,groups = FALSE,
layout = c(1,6),xlim = c(0,55),
main = "Who is Raising the Children?",
xlab = "Percent",
scales = list(x = list(tck = 0, alternating = FALSE)),
typeRaceMeans = typeRaceMeans,
panel = function(...){
panel.fill(rgb(.9,.9,.9))
panel.grid(h = 0,v = -1,col = "white",lwd = 2)
i <- panel.number()
panel.abline(v = typeRaceMeans[i],col = "red",lwd = 3)
panel.barchart(col = rgb(0,.5,1),cex = .95,...)
}
)
install.packages("barchart")
StatusCount<- as.data.frame.matrix(employeeData %>%
group_by(Attrition) %>%
select(Gender) %>%
table())
StatusCount
barchart(StatusCount,groups = FALSE,
layout = c(1,6),xlim = c(0,55),
main = "Who is Raising the Children?",
xlab = "Percent",
scales = list(x = list(tck = 0, alternating = FALSE)),
typeRaceMeans = typeRaceMeans,
panel = function(...){
panel.fill(rgb(.9,.9,.9))
panel.grid(h = 0,v = -1,col = "white",lwd = 2)
i <- panel.number()
panel.abline(v = typeRaceMeans[i],col = "red",lwd = 3)
panel.barchart(col = rgb(0,.5,1),cex = .95,...)
}
)
yes<-subset(employeeData,Attrition=="Yes")
no<-subset(employeeData,Attrition=="No")
yes<-subset(employeeData,Attrition=="Yes")
no<-subset(employeeData,Attrition=="No")
yes
no
ggplot() + geom_density(aes(x=MonthlyIncome),size=1, colour="black", data=yes) +
geom_density(aes(x=MonthlyIncome),size=1, colour="red", data=no)
tapply(employeeData$Attrition, employeeData$OverTime, mean)
ggplot(yes, aes(x=Department, y=MonthlyIncome, fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income") + hw
employeeData %>% group_by(Attrition) %>% summarize(N = n()) %>%
ggplot(aes(Attrition, N, fill = Attrition)) +
geom_col() +
theme_bw() +
scale_fill_brewer(palette="Set1") +
# geom_text(aes(label = N), size = 5, vjust = 1.2, color = 'purple) +
ggtitle("Count of Employee Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Count") + hw
attr_grp <- employeeData %>%
group_by(Attrition, Department) %>%
summarize(mean = mean(round(MonthlyIncome),2))
attr_grp
ggplot(yes, aes(x=Department, y=MonthlyIncome, fill=Attrition)) +
geom_point() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income") + hw
ggplot(yes, aes(x=Department, y=MonthlyIncome, fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income") + hw
ggplot(yes, aes(x=Department, y=MonthlyIncome, fill=percent(Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income") + hw
ggplot(yes, aes(x=Department, y=MonthlyIncome, fill=percent(Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income") + hw
ggplot(yes, aes(x=Department, y=MonthlyIncome/100, fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income") + hw
ggplot(yes, aes(x=Department, y=percentage(MonthlyIncome), fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income") + hw
ggplot(yes, aes(x=Department, y=percent_rank(MonthlyIncome), fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income") + hw
ggplot(yes, aes(x=Department, y=percentile(MonthlyIncome), fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income") + hw
ggplot(yes, aes(x=Department, y=percent_rank(MonthlyIncome), fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income") + hw
ggplot(employeeData, aes(x=Department, y=percent_rank(MonthlyIncome), fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income by Department") + hw
ggplot(employeeData, aes(x=Department, y=percent_rank(MonthlyIncome), fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Monthly Income Percentile Difference") + hw
ggplot(employeeData, aes(x=Department, y=percent_rank(MonthlyIncome), fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income by Attrition") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Income Percentile") + hw
ggplot(employeeData, aes(x=Department, y=percent_rank(MonthlyIncome), fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income Percentile Diffrence ") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Income Percentile") + hw
ggplot(employeeData, aes(x=OverTime, y=percent_rank(MonthlyIncome), fill=Attrition)) +
geom_boxplot() +
ggtitle("Monthly Income Percentile Diffrence ") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Income Percentile") + hw
ggplot(employeeData, aes(x=OverTime, y=percent_rank(MonthlyIncome), fill=Attrition)) +
geom_boxplot() +
ggtitle("Overtime Percentile Diffrence ") +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 15)) +
labs(x = "Attrition", y = "Income Percentile") + hw
set.seed(1234)
ShuffledAttrition = employeeData[sample(nrow(Attrition)),
set.seed(1234)
ShuffledAttrition = employeeData[sample(nrow(Attrition)),]
set.seed(1234)
ShuffledAttrition = employeeData[sample(nrow(emp_data)),]
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
source(hwRight)
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
getwd()
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
getwd()
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
source(hw.r)
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
source("hw.r")
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
source("hw.R")
data <- read.csv(file = "Employee-Attrition.csv")
data
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
source("hw")
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
source("C:\Users\abebe\Documents\George Mason University\2-Spring 2022\STAT 515\HR-Analytics-_R\HR-Analytics Project _R\hw.R")
setwd("~/George Mason University/2-Spring 2022/STAT 515/HR-Analytics-_R/HR-Analytics Project _R")
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
source("hw.R")
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
source("hw.R")
library("dplyr")
library("MASS")
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(MASS) # Boston Housing Data
library(randomForest)
library(lattice)
library(rpart)
library(hexbin)
source('hw.r)
source('hw.R)
source('hw.R')
source("hw.R")
library(ggplot2)
library(plotly)
library(plyr)
library(flexdashboard)
source("hw.R")
